//
//  CAtomicsTests.swift
//  AtomicsTests
//

import XCTest
import Dispatch

#if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)
import func Darwin.C.stdlib.arc4random
#else // assuming os(Linux)
import func Glibc.random
#endif

import CAtomics

#if swift(>=4.0)
extension FixedWidthInteger
{
  // returns a positive random integer greater than 0 and less-than-or-equal to Self.max/2
  // the least significant bit is always set.
  static func randomPositive() -> Self
  {
    var t = Self()
    for _ in 0...((t.bitWidth-1)/32)
    {
    #if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)
      t = t<<32 &+ Self(truncatingIfNeeded: arc4random())
    #else // probably Linux
      t = t<<32 &+ Self(truncatingIfNeeded: random())
    #endif
    }
    return (t|1) & (Self.max>>1)
  }
}
#else
extension UInt
{
  // returns a positive random integer greater than 0 and less-than-or-equal to UInt32.max/2
  // the least significant bit is always set.
  static func randomPositive() -> UInt
  {
  #if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)
    return UInt(arc4random() & 0x3fff_fffe + 1)
  #else
    return UInt(random() & 0x3fff_fffe + 1)
  #endif
  }
}
#endif
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']
% pointers = ['Mutable', '']

public class CAtomicsTests: XCTestCase
{
  public static var allTests = [
% for integer in integers:
% end
% for mutable in pointers:
    ("test${mutable}Pointer", test${mutable}Pointer),
% end
    ("testBool", testBool),
    ("testFence", testFence),
  ]

% for i in integers:
  public func test${i}()
  {
    var i = CAtomics${i}()
    CAtomics${i}Init(0, &i)
    XCTAssert(CAtomics${i}Load(&i, .relaxed) == 0)

#if swift(>=4.0)
    let r1 = ${i}.randomPositive()
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()
#else
% truncating = '' if (i == 'Int' or i == 'UInt' or i == 'Int64' or i == 'UInt64') else 'truncatingBitPattern: '
    let r1 = ${i}(${truncating}UInt.randomPositive())
    let r2 = ${i}(${truncating}UInt.randomPositive())
    let r3 = ${i}(${truncating}UInt.randomPositive())
#endif

    CAtomics${i}Store(r1, &i, .relaxed)
    XCTAssert(r1 == CAtomics${i}Load(&i, .relaxed))

    var j = CAtomics${i}Swap(r2, &i, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, CAtomics${i}Load(&i, .relaxed))

    j = CAtomics${i}Add(r1, &i, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 &+ r2, CAtomics${i}Load(&i, .relaxed))

    j = CAtomics${i}Sub(r2, &i, .relaxed)
    XCTAssertEqual(r1 &+ r2, j)
    XCTAssertEqual(r1, CAtomics${i}Load(&i, .relaxed))

    CAtomics${i}Store(r1, &i, .relaxed)
    j = CAtomics${i}Or(r2, &i, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 | r2, CAtomics${i}Load(&i, .relaxed))

    CAtomics${i}Store(r2, &i, .relaxed)
    j = CAtomics${i}Xor(r1, &i, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 ^ r2, CAtomics${i}Load(&i, .relaxed))

    CAtomics${i}Store(r1, &i, .relaxed)
    j = CAtomics${i}And(r2, &i, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 & r2, CAtomics${i}Load(&i, .relaxed))

    j = r1
    CAtomics${i}Store(r1, &i, .relaxed)
    XCTAssertTrue(CAtomics${i}CAS(&j, r2, &i, .strong, .relaxed, .relaxed))
    XCTAssertEqual(r2, CAtomics${i}Load(&i, .relaxed))

    j = r2
    CAtomics${i}Store(r1, &i, .relaxed)
    while(!CAtomics${i}CAS(&j, r3, &i, .weak, .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, CAtomics${i}Load(&i, .relaxed))
  }

% end
% for mutable in pointers:
  public func test${mutable}Pointer()
  {
    var p = CAtomics${mutable}Pointer()
    CAtomics${mutable}PointerInit(nil, &p)
    XCTAssert(CAtomics${mutable}PointerLoad(&p, .relaxed) == nil)

    let r1 = Unsafe${mutable}RawPointer(bitPattern: UInt.randomPositive())
    let r2 = Unsafe${mutable}RawPointer(bitPattern: UInt.randomPositive())
    let r3 = Unsafe${mutable}RawPointer(bitPattern: UInt.randomPositive())

    CAtomics${mutable}PointerStore(r1, &p, .relaxed)
    XCTAssert(r1 == CAtomics${mutable}PointerLoad(&p, .relaxed))

    var j = CAtomics${mutable}PointerSwap(r2, &p, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, CAtomics${mutable}PointerLoad(&p, .relaxed))

    j = r1
    CAtomics${mutable}PointerStore(r1, &p, .relaxed)
    XCTAssertTrue(CAtomics${mutable}PointerCAS(&j, r2, &p, .strong, .relaxed, .relaxed))
    XCTAssertEqual(r2, CAtomics${mutable}PointerLoad(&p, .relaxed))

    j = r2
    CAtomics${mutable}PointerStore(r1, &p, .relaxed)
    while(!CAtomics${mutable}PointerCAS(&j, r3, &p, .weak, .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, CAtomics${mutable}PointerLoad(&p, .relaxed))
  }

% end
  public func testBool()
  {
    var boolean = CAtomicsBoolean()
    CAtomicsBooleanInit(false, &boolean)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == false)

    CAtomicsBooleanStore(false, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == false)

    CAtomicsBooleanStore(true, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == true)

    CAtomicsBooleanStore(false, &boolean, .relaxed)
    CAtomicsBooleanOr(true, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == true)
    CAtomicsBooleanOr(false, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == true)
    CAtomicsBooleanStore(false, &boolean, .relaxed)
    CAtomicsBooleanOr(false, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == false)
    CAtomicsBooleanOr(true, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == true)

    CAtomicsBooleanAnd(false, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == false)
    CAtomicsBooleanAnd(true, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == false)

    CAtomicsBooleanXor(false, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == false)
    CAtomicsBooleanXor(true, &boolean, .relaxed)
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == true)

    let old = CAtomicsBooleanSwap(false, &boolean, .relaxed)
    XCTAssert(old == true)
    XCTAssert(CAtomicsBooleanSwap(true, &boolean, .relaxed) == false)

    var current = true
    XCTAssert(CAtomicsBooleanLoad(&boolean, .relaxed) == current)
    CAtomicsBooleanCAS(&current, false, &boolean, .strong, .relaxed, .relaxed)
    current = CAtomicsBooleanLoad(&boolean, .relaxed)
    XCTAssert(current == false)
    if CAtomicsBooleanCAS(&current, true, &boolean, .strong, .relaxed, .relaxed)
    {
      current = !current
      XCTAssert(CAtomicsBooleanCAS(&current, false, &boolean, .weak, .relaxed, .relaxed))
      current = !current
      XCTAssert(CAtomicsBooleanCAS(&current, true, &boolean, .weak, .relaxed, .relaxed))
    }
  }

  public func testFence()
  {
    CAtomicsThreadFence(.release)
    CAtomicsThreadFence(.acquire)
  }
}

