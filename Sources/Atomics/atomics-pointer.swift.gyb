//
//  atomics-pointer.swift
//
//  Created by Guillaume Lessard on 2015-05-21.
//  Copyright Â© 2015, 2016 Guillaume Lessard. All rights reserved.
//

import CAtomics
% for (AtomicType, PointerType, MemoryBinding, Mutable) in [('AtomicMutableRawPointer', 'UnsafeMutableRawPointer', '', 'Mutable'), ('AtomicRawPointer', 'UnsafeRawPointer', '', ''), ('AtomicMutablePointer<Pointee>', 'UnsafeMutablePointer<Pointee>', '?.assumingMemoryBound(to: Pointee.self)', 'Mutable'), ('AtomicPointer<Pointee>', 'UnsafePointer<Pointee>', '?.assumingMemoryBound(to: Pointee.self)', ''), ('AtomicOpaquePointer', 'OpaquePointer', '', '')]:

public struct ${AtomicType}
{
  @_versioned let p = UnsafeMutablePointer<CAtomics${Mutable}Pointer>.allocate(capacity: 1)

  public init(_ pointer: ${PointerType}? = nil)
  {
    CAtomics${Mutable}PointerInit(Unsafe${Mutable}RawPointer(pointer), p)
  }

  public var pointer: ${PointerType}? {
    @inline(__always)
    get {
      return ${PointerType}(CAtomics${Mutable}PointerLoad(p, .relaxed)${MemoryBinding})
    }
  }

  public func destroy()
  {
    p.deallocate(capacity: 1)
  }

  @inline(__always)
  public func load(order: LoadMemoryOrder = .sequential) -> ${PointerType}?
  {
    return ${PointerType}(CAtomics${Mutable}PointerLoad(p, order)${MemoryBinding})
  }

  @inline(__always)
  public func store(_ pointer: ${PointerType}?, order: StoreMemoryOrder = .sequential)
  {
    CAtomics${Mutable}PointerStore(Unsafe${Mutable}RawPointer(pointer), p, order)
  }

  @inline(__always)
  public func swap(_ pointer: ${PointerType}?, order: MemoryOrder = .sequential) -> ${PointerType}?
  {
    return ${PointerType}(CAtomics${Mutable}PointerSwap(Unsafe${Mutable}RawPointer(pointer), p, order)${MemoryBinding})
  }

  @inline(__always) @discardableResult
  public func loadCAS(current: UnsafeMutablePointer<${PointerType}?>,
                      future: ${PointerType}?,
                      type: CASType = .weak,
                      orderSwap: MemoryOrder = .sequential,
                      orderLoad: LoadMemoryOrder = .sequential) -> Bool
  {
    return current.withMemoryRebound(to: Optional<Unsafe${Mutable}RawPointer>.self, capacity: 1) {
      CAtomics${Mutable}PointerCAS($0, Unsafe${Mutable}RawPointer(future), p, type, orderSwap, orderLoad)
    }
  }

  @inline(__always) @discardableResult
  public func CAS(current: ${PointerType}?, future: ${PointerType}?,
                  type: CASType = .weak,
                  order: MemoryOrder = .sequential) -> Bool
  {
    var expect = current
    return loadCAS(current: &expect, future: future, type: type, orderSwap: order, orderLoad: .relaxed)
  }
}
% end
